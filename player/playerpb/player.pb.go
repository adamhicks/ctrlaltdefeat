// Code generated by protoc-gen-go. DO NOT EDIT.
// source: player.proto

package playerpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import reflexpb "github.com/luno/reflex/reflexpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetRoundReq struct {
	RoundId              int64    `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoundReq) Reset()         { *m = GetRoundReq{} }
func (m *GetRoundReq) String() string { return proto.CompactTextString(m) }
func (*GetRoundReq) ProtoMessage()    {}
func (*GetRoundReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_player_19d4200f66dc0189, []int{0}
}
func (m *GetRoundReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRoundReq.Unmarshal(m, b)
}
func (m *GetRoundReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRoundReq.Marshal(b, m, deterministic)
}
func (dst *GetRoundReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoundReq.Merge(dst, src)
}
func (m *GetRoundReq) XXX_Size() int {
	return xxx_messageInfo_GetRoundReq.Size(m)
}
func (m *GetRoundReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoundReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoundReq proto.InternalMessageInfo

func (m *GetRoundReq) GetRoundId() int64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

type GetRoundRes struct {
	Rank                 int64          `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	Parts                []*PlayerParts `protobuf:"bytes,2,rep,name=parts,proto3" json:"parts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetRoundRes) Reset()         { *m = GetRoundRes{} }
func (m *GetRoundRes) String() string { return proto.CompactTextString(m) }
func (*GetRoundRes) ProtoMessage()    {}
func (*GetRoundRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_player_19d4200f66dc0189, []int{1}
}
func (m *GetRoundRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRoundRes.Unmarshal(m, b)
}
func (m *GetRoundRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRoundRes.Marshal(b, m, deterministic)
}
func (dst *GetRoundRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoundRes.Merge(dst, src)
}
func (m *GetRoundRes) XXX_Size() int {
	return xxx_messageInfo_GetRoundRes.Size(m)
}
func (m *GetRoundRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoundRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoundRes proto.InternalMessageInfo

func (m *GetRoundRes) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *GetRoundRes) GetParts() []*PlayerParts {
	if m != nil {
		return m.Parts
	}
	return nil
}

type PlayerParts struct {
	Player               string   `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Part                 int64    `protobuf:"varint,2,opt,name=part,proto3" json:"part,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerParts) Reset()         { *m = PlayerParts{} }
func (m *PlayerParts) String() string { return proto.CompactTextString(m) }
func (*PlayerParts) ProtoMessage()    {}
func (*PlayerParts) Descriptor() ([]byte, []int) {
	return fileDescriptor_player_19d4200f66dc0189, []int{2}
}
func (m *PlayerParts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlayerParts.Unmarshal(m, b)
}
func (m *PlayerParts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlayerParts.Marshal(b, m, deterministic)
}
func (dst *PlayerParts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerParts.Merge(dst, src)
}
func (m *PlayerParts) XXX_Size() int {
	return xxx_messageInfo_PlayerParts.Size(m)
}
func (m *PlayerParts) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerParts.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerParts proto.InternalMessageInfo

func (m *PlayerParts) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

func (m *PlayerParts) GetPart() int64 {
	if m != nil {
		return m.Part
	}
	return 0
}

func init() {
	proto.RegisterType((*GetRoundReq)(nil), "playerpb.GetRoundReq")
	proto.RegisterType((*GetRoundRes)(nil), "playerpb.GetRoundRes")
	proto.RegisterType((*PlayerParts)(nil), "playerpb.PlayerParts")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlayerClient is the client API for Player service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlayerClient interface {
	Stream(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (Player_StreamClient, error)
	GetRoundParts(ctx context.Context, in *GetRoundReq, opts ...grpc.CallOption) (*GetRoundRes, error)
}

type playerClient struct {
	cc *grpc.ClientConn
}

func NewPlayerClient(cc *grpc.ClientConn) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) Stream(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (Player_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Player_serviceDesc.Streams[0], "/playerpb.Player/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Player_StreamClient interface {
	Recv() (*reflexpb.Event, error)
	grpc.ClientStream
}

type playerStreamClient struct {
	grpc.ClientStream
}

func (x *playerStreamClient) Recv() (*reflexpb.Event, error) {
	m := new(reflexpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playerClient) GetRoundParts(ctx context.Context, in *GetRoundReq, opts ...grpc.CallOption) (*GetRoundRes, error) {
	out := new(GetRoundRes)
	err := c.cc.Invoke(ctx, "/playerpb.Player/GetRoundParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServer is the server API for Player service.
type PlayerServer interface {
	Stream(*reflexpb.StreamRequest, Player_StreamServer) error
	GetRoundParts(context.Context, *GetRoundReq) (*GetRoundRes, error)
}

func RegisterPlayerServer(s *grpc.Server, srv PlayerServer) {
	s.RegisterService(&_Player_serviceDesc, srv)
}

func _Player_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(reflexpb.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayerServer).Stream(m, &playerStreamServer{stream})
}

type Player_StreamServer interface {
	Send(*reflexpb.Event) error
	grpc.ServerStream
}

type playerStreamServer struct {
	grpc.ServerStream
}

func (x *playerStreamServer) Send(m *reflexpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Player_GetRoundParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetRoundParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playerpb.Player/GetRoundParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetRoundParts(ctx, req.(*GetRoundReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Player_serviceDesc = grpc.ServiceDesc{
	ServiceName: "playerpb.Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoundParts",
			Handler:    _Player_GetRoundParts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Player_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "player.proto",
}

func init() { proto.RegisterFile("player.proto", fileDescriptor_player_19d4200f66dc0189) }

var fileDescriptor_player_19d4200f66dc0189 = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0xdd, 0xee, 0x6a, 0x5d, 0xa7, 0x8a, 0x30, 0xa0, 0xd6, 0x9e, 0x96, 0x9c, 0x0a, 0x4a, 0x56,
	0x56, 0x10, 0x3c, 0x79, 0x12, 0xf1, 0x22, 0x4b, 0xfc, 0x00, 0x69, 0xed, 0xa8, 0x8b, 0xdd, 0x26,
	0x4d, 0x53, 0xd1, 0xa3, 0x7f, 0x2e, 0x49, 0x5a, 0xcc, 0xc1, 0x53, 0xde, 0x7b, 0xf3, 0x26, 0x6f,
	0x66, 0xe0, 0x40, 0xd5, 0xc5, 0x37, 0x69, 0xae, 0xb4, 0x34, 0x12, 0xe7, 0x9e, 0xa9, 0x32, 0xbb,
	0x78, 0xdb, 0x98, 0xf7, 0xbe, 0xe4, 0x2f, 0x72, 0xbb, 0xac, 0xfb, 0x46, 0x2e, 0x35, 0xbd, 0xd6,
	0xf4, 0x35, 0x3c, 0xaa, 0x1c, 0x80, 0xef, 0x63, 0x39, 0x24, 0xf7, 0x64, 0x84, 0xec, 0x9b, 0x4a,
	0x50, 0x8b, 0x67, 0x30, 0xd7, 0x16, 0x3f, 0x6f, 0xaa, 0x34, 0x5a, 0x44, 0xf9, 0x4c, 0xec, 0x39,
	0xfe, 0x50, 0xb1, 0xc7, 0xd0, 0xd9, 0x21, 0xc2, 0x8e, 0x2e, 0x9a, 0x8f, 0xc1, 0xe5, 0x30, 0x9e,
	0xc3, 0xae, 0x2a, 0xb4, 0xe9, 0xd2, 0xe9, 0x62, 0x96, 0x27, 0xab, 0x63, 0x3e, 0x0e, 0xc5, 0xd7,
	0x0e, 0xac, 0x6d, 0x51, 0x78, 0x0f, 0xbb, 0x81, 0x24, 0x50, 0xf1, 0x04, 0x62, 0xef, 0x76, 0x3f,
	0xee, 0x8b, 0x81, 0xd9, 0x1c, 0xeb, 0x4f, 0xa7, 0x3e, 0xc7, 0xe2, 0xd5, 0x4f, 0x04, 0xb1, 0xef,
	0xc5, 0x6b, 0x88, 0x9f, 0x8c, 0xa6, 0x62, 0x8b, 0xa7, 0x7c, 0xdc, 0x90, 0x7b, 0x45, 0x50, 0xdb,
	0x53, 0x67, 0xb2, 0xa3, 0xbf, 0xc2, 0xdd, 0x27, 0x35, 0x86, 0x4d, 0x2e, 0x23, 0xbc, 0x85, 0xc3,
	0x71, 0x1b, 0x9f, 0x1f, 0x0c, 0x1b, 0x1c, 0x24, 0xfb, 0x57, 0xee, 0xd8, 0xa4, 0x8c, 0xdd, 0xfd,
	0xae, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x04, 0xdf, 0x7c, 0x87, 0x01, 0x00, 0x00,
}
